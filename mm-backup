#!/bin/bash
# shellcheck disable=SC2012,SC2181

################################################################################

# Database host (String)
PG_HOST="${DB_HOST:-127.0.0.1}"

# Database user name (String)
PG_USER="${DB_USER:-mmuser}"

# Database user password (String)
PG_PASS="${DB_PASS}"

# Name of Mattermost database (String)
PG_DB="${DB_NAME:-mattermost}"

# Path to directory with Mattermost data (String)
MM_DATA="${DATA_DIR:-/srv/mattermost-data}"

# Path to directory with Mattermost server (String)
MM_SERVER="${SERVER_DIR:-/srv/mattermost}"

# Path to directory with backups (String)
BACKUP_DIR="${BACKUP_DIR:-/var/backup}"

# Retention in days (Number)
RETENTION=${RETENTION:-90}

# XZ compression level (Number)
XZ_COMPRESSION=${XZ_COMPRESSION:-4}

################################################################################

backup_date=""
full_backup=""

################################################################################

# Main handler
#
# Code: No
# Echo: No
main() {
  if [[ "$1" == "full" ]] ; then
    full_backup=true
  fi

  check

  log "Starting backup process…"

  backup_date=$(date '+%Y-%m-%d-%H%M')

  backupDB
  backupData

  if [[ -n "$full_backup" ]] ; then
    backupServer
  fi

  log "Backup successfully complete"
}

# Check preferencies
#
# Code: No
# Echo: No
check() {
  if [[ -z "$PG_HOST" ]] ; then
    log "(ERROR) DB host is empty"
    doExit 1
  fi

  if [[ -z "$PG_USER" ]] ; then
    log "(ERROR) DB user is empty"
    doExit 1
  fi

  if [[ -z "$PG_PASS" ]] ; then
    log "(ERROR) DB password is empty"
    doExit 1
  fi

  if [[ -z "$PG_DB" ]] ; then
    log "(ERROR) DB name is empty"
    doExit 1
  fi

  if [[ -z "$MM_DATA" ]] ; then
    log "(ERROR) Path to Mattermost data directory is empty"
    doExit 1
  fi

  if [[ -z "$MM_SERVER" ]] ; then
    log "(ERROR) Path to Mattermost server directory is empty"
    doExit 1
  fi

  if [[ ! -r "$MM_DATA" ]] ; then
    log "(ERROR) Directory $MM_DATA is not readable"
    doExit 1
  fi

  if [[ ! -r "$MM_SERVER" ]] ; then
    log "(ERROR) Directory $MM_SERVER is not readable"
    doExit 1
  fi

  if [[ ! -w "$BACKUP_DIR" ]] ; then
    log "(ERROR) Directory $BACKUP_DIR is not writable"
    doExit 1
  fi

  if ! type -P xz &> /dev/null ; then
    log "(ERROR) xz is required"
    doExit 1
  fi

  if ! type -P pg_dump &> /dev/null ; then
    log "(ERROR) pg_dump is required"
    doExit 1
  fi
}

# Create xz archive with database dump
#
# Code: No
# Echo: No
backupDB() {
  local output output_size

  log "Backuping database…"

  export PGPASSWORD="$PG_PASS"

  output="${BACKUP_DIR}/database-${backup_date}.xz"

  pg_dump -h "$PG_HOST" -U "$PG_USER" "$PG_DB" | xz -"${XZ_COMPRESSION}" > "$output"

  if [[ $? -ne 0 ]] ; then
    log "(ERROR) Can't create database backup"
    exit 1
  fi

  export PGPASSWORD=""

  output_size=$(ls -lah "$output" | awk -F " " '{print $5}')

  log "Database backup successfully created (size: $output_size)"
}

# Create xz archive with server data
#
# Code: No
# Echo: No
backupData() {
  local output output_size

  log "Backuping data…"

  output="${BACKUP_DIR}/data-${backup_date}.tar.xz"

  tar -cf - "$MM_DATA" | xz -"${XZ_COMPRESSION}" -z - > "$output"

  output_size=$(ls -lah "$output" | awk -F " " '{print $5}')

  log "Data backup successfully created (size: $output_size)"
}

# Create xz archive with server installation directory
#
# Code: No
# Echo: No
backupServer() {
  local output output_size

  log "Backuping server…"

  output="${BACKUP_DIR}/server-${backup_date}.tar.xz"

  tar -cf --exclude="$MM_DATA/logs" - "$MM_DATA" | xz -"${XZ_COMPRESSION}" -z - > "$output"

  output_size=$(ls -lah "$output" | awk -F " " '{print $5}')

  log "Server backup successfully created (size: $output_size)"
}

# Print message to log file
#
# 1: Log message (String)
#
# Code: No
# Echo: No
log() {
  echo "$(date '+[ %Y/%m/%d %H:%M:%S.%3N ]') $*"
}

################################################################################

main "$@"
